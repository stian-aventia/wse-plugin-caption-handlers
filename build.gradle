import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

plugins {
    id 'java-library'
    id "com.gorylenko.gradle-git-properties" version "2.4.0-rc1"
}

group 'com.wowza.wms.plugin.captions'
version '1.1.3'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    flatDir {
        dirs "$wseLibDir"
    }
}

configurations {
    plugin
    compileClasspath.extendsFrom(plugin)
    runtimeClasspath.extendsFrom(plugin)
    testCompileClasspath.extendsFrom(plugin)
    testRuntimeClasspath.extendsFrom(plugin)
}

dependencies {
    implementation name: 'wms-server'
    implementation name: 'wms-stream-live'
    implementation name: 'wms-stream-publish'
    implementation name: 'wms-transcoder'
    implementation name: 'wms-httpstreamer-cupertinostreaming'
//    implementation name: 'wms-pushpublish'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.2'
    implementation 'org.apache.logging.log4j:log4j-api:2.17.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0'
    plugin group: 'com.microsoft.cognitiveservices.speech', name: 'client-sdk', version: '1.44.0', ext: 'jar'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

tasks.register('copyDeps', Copy) {
    from  (configurations.plugin)
    into layout.buildDirectory.dir("libs")
}

tasks.register('copyLibsForDocker', Copy) {
    dependsOn jar, copyDeps
    from layout.buildDirectory.dir("libs")
    into layout.projectDirectory.dir("lib")
}

jar.configure {
    finalizedBy (copyLibsForDocker)
}

tasks.withType(Jar).configureEach {
    manifest {
        attributes(
                'Gradle-Version'        : "Gradle ${gradle.gradleVersion}",
                'Created-By'      		: "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Name'                  : "${project.name}",
                'Build-Version'	        : "${project.version}",
                'Build-Timestamp'    	: "${-> project.ext.gitProps['git.commit.time']}",
                'Build-Revision'        : "${-> project.ext.gitProps['git.commit.id.abbrev']}",
        )
    }
    exclude('git.properties')
    metaInf {
        from files('LICENSE.txt')
    }
    archiveBaseName = 'wse-plugin-' + projectName
}

clean.configure {
    delete layout.projectDirectory.dir("lib")
}

gitProperties {
    extProperty = 'gitProps'
    dateFormat = "EEE LLL dd HH:mm:ss yyyy Z"
    dateFormatTimeZone = "UTC"
}

generateGitProperties.outputs.upToDateWhen { false }

tasks.register('generateReleaseInfo') {
    dependsOn generateGitProperties
    group = "build"
    Provider<Directory> outputDir = layout.buildDirectory.dir('generated/java') as Provider<Directory>
    outputs.dir outputDir.get().asFile.absolutePath
    doLast {
        def now = System.currentTimeMillis()
        def packageDotPath = "${project.group}"
        def packagePath = packageDotPath.replaceAll('\\.', '/')
        Directory dir = outputDir.get().dir(packagePath)
        dir.asFile.mkdirs()
        dir.file("ReleaseInfo.java").asFile.text =
                """|package $packageDotPath;
                   |public class ReleaseInfo {
                   |    public static String getProject() { return "${projectName}"; }
                   |    public static String getVersion() { return "${project.version}"; }
                   |    public static String getBuildComitDate() { return "${-> project.ext.gitProps['git.commit.time']}"; }
                   |    public static String getBuildNumber() { return "${-> project.ext.gitProps['git.commit.id.abbrev']}"; }
                   |}""".stripMargin()
    }
}

sourceSets.main.java.srcDir generateReleaseInfo
clean.finalizedBy generateReleaseInfo
compileJava.dependsOn generateReleaseInfo

test {
    useJUnitPlatform()
}
